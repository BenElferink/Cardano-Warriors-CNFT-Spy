{"version":3,"sources":["functions/cnft.js","components/Listings.js","constants/ADA_SYMBOL.js","App.js","index.js"],"names":["ENDPOINT","crawlCNFT","options","payload","project","types","search","undefined","sort","page","priceMin","priceMax","verified","nsfw","sold","Promise","resolve","reject","Axios","post","headers","then","response","data","results","catch","error","Loading","style","width","display","placeItems","CircularProgress","color","HtmlTooltip","styled","className","props","Tooltip","classes","popper","theme","tooltipClasses","tooltip","backgroundColor","maxWidth","fontSize","typography","pxToRem","border","ListItem","listing","Card","sx","margin","borderRadius","overflow","followCursor","title","Typography","variant","asset","metadata","type","rarity","traits","map","trait","_id","items","item","name","CardActionArea","onClick","window","open","CardMedia","component","image","replace","alt","CardContent","gutterBottom","price","Date","createdAt","toLocaleString","Visibility","views","length","Favorite","favouriteCount","Listings","useState","setData","isLoadingMore","setIsLoadingMore","pageRef","useRef","isDesktop","useMediaQuery","useEffect","interval","setInterval","warriors","prev","newWarriors","currentWarrior","push","console","clearInterval","fontFamily","fontWeight","textShadow","onScroll","e","target","scrollTop","scrollHeight","clientHeight","scrollLeft","clientWidth","scrollWidth","current","i","unshift","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10e02c08.chunk.js","sourcesContent":["import Axios from 'axios'\n\nconst ENDPOINT = 'https://api.cnft.io/market/listings'\n\nconst crawlCNFT = (options = {}) => {\n  const payload = {\n    project: options.project ?? 'Cardano Warriors',\n    types: options.types ?? ['listing', 'offer'],\n    search: options.search ?? undefined, // 'CardanoWarrior2682'\n    sort: options.sort ?? undefined, // { price: 1 }\n    page: options.page ?? 1,\n    priceMin: options.priceMin ?? 0,\n    priceMax: options.priceMax ?? undefined,\n    verified: options.verified ?? true,\n    nsfw: options.nsfw ?? false,\n    sold: options.sold ?? false,\n  }\n\n  return new Promise((resolve, reject) => {\n    Axios.post(ENDPOINT, payload, { headers: { 'Content-Type': 'application/json' } })\n      .then((response) => resolve(response.data.results))\n      .catch((error) => reject(error))\n  })\n}\n\nexport default crawlCNFT\n","import { Fragment, useEffect, useRef, useState } from 'react'\nimport { styled } from '@mui/material/styles'\nimport { tooltipClasses } from '@mui/material/Tooltip'\nimport {\n  Card,\n  CardActionArea,\n  CardContent,\n  CardMedia,\n  CircularProgress,\n  Tooltip,\n  Typography,\n  useMediaQuery,\n} from '@mui/material'\nimport { Favorite as FavoriteIcon, Visibility as VisibilityIcon } from '@mui/icons-material'\nimport ADA_SYMBOL from '../constants/ADA_SYMBOL'\nimport crawlCNFT from '../functions/cnft'\n\nconst Loading = () => (\n  <div style={{ width: '100%', display: 'grid', placeItems: 'center' }}>\n    <CircularProgress color='secondary' />\n  </div>\n)\n\nconst HtmlTooltip = styled(({ className, ...props }) => <Tooltip {...props} classes={{ popper: className }} />)(\n  ({ theme }) => ({\n    [`& .${tooltipClasses.tooltip}`]: {\n      backgroundColor: '#f5f5f9',\n      color: 'rgba(0, 0, 0, 0.87)',\n      maxWidth: 220,\n      fontSize: theme.typography.pxToRem(12),\n      border: '1px solid #dadde9',\n    },\n  }),\n)\n\nfunction Listings({ title, options }) {\n  const [data, setData] = useState([])\n  const [isLoadingMore, setIsLoadingMore] = useState(false)\n  const pageRef = useRef(1)\n  const isDesktop = useMediaQuery('(min-width: 768px)')\n\n  useEffect(() => {\n    // keep looking for new data every 10 seconds\n    const interval = setInterval(() => {\n      crawlCNFT(options)\n        .then((warriors) => {\n          setData((prev) => {\n            // if there is no pre-fetched data, just return the current fetched data\n            if (!prev.length) return warriors\n            // a verification method to add only new data to the front of the array\n            const newWarriors = []\n            for (const currentWarrior of warriors) {\n              if (currentWarrior._id === prev[0]._id) break\n              newWarriors.push(currentWarrior)\n            }\n            return [...newWarriors, ...prev]\n          })\n        })\n        .catch((error) => {\n          console.error(error)\n        })\n    }, 1000 * 10)\n\n    return () => {\n      clearInterval(interval)\n    }\n  }, [options])\n\n  const handleScroll = (e) => {\n    const { scrollTop, scrollHeight, clientHeight, scrollLeft, clientWidth, scrollWidth } = e.target\n    const isScrolledToBottom = scrollTop === scrollHeight - clientHeight\n    const isScrolledToRight = scrollLeft === scrollWidth - clientWidth\n\n    // fetch next page of data when scrolled to bottom\n    if (!isLoadingMore && ((isDesktop && isScrolledToBottom) || (!isDesktop && isScrolledToRight))) {\n      pageRef.current += 1\n      setIsLoadingMore(true)\n      crawlCNFT({ ...options, page: pageRef.current })\n        .then((warriors) => {\n          setData((prev) => {\n            // a verification method to add only new data to the end of the array\n            const newWarriors = []\n            for (let i = warriors.length - 1; i >= 0; i--) {\n              const currentWarrior = warriors[i]\n              if (currentWarrior._id === prev[prev.length - 1]._id) break\n              newWarriors.unshift(currentWarrior)\n            }\n            return [...prev, ...newWarriors]\n          })\n          setIsLoadingMore(false)\n        })\n        .catch((error) => {\n          console.error(error)\n          setIsLoadingMore(false)\n        })\n    }\n  }\n\n  return (\n    <div className='listings-container'>\n      <Typography\n        variant='h4'\n        component='div'\n        sx={{\n          margin: '1rem 0',\n          fontFamily: 'IndieFlower',\n          fontWeight: 'bold',\n          color: 'whitesmoke',\n          textShadow: '-1px 1px 3px black',\n        }}>\n        {title}\n      </Typography>\n      <div className='list' onScroll={handleScroll}>\n        {data.length ? data.map((listing) => <ListItem key={listing._id} listing={listing} />) : <Loading />}\n        {isLoadingMore && <Loading />}\n      </div>\n    </div>\n  )\n}\n\nfunction ListItem({ listing }) {\n  return (\n    <Card sx={{ margin: '1rem 2rem', borderRadius: '1rem', overflow: 'visible' }}>\n      <HtmlTooltip\n        followCursor\n        title={\n          <Fragment>\n            <Typography variant='body2'>\n              {listing.asset.metadata.type} - {listing.asset.metadata.rarity}\n            </Typography>\n            <br />\n            {listing.asset.metadata.traits.map((trait) => (\n              <Fragment key={`${listing._id}-${trait}`}>\n                <Typography variant='body3'>{trait}</Typography>\n                <br />\n              </Fragment>\n            ))}\n            <br />\n            {listing.asset.metadata.items.map((item) => (\n              <Fragment key={`${listing._id}-${item.name}`}>\n                <Typography variant='body3'>\n                  {item.name} - {item.rarity}\n                </Typography>\n                <br />\n              </Fragment>\n            ))}\n          </Fragment>\n        }>\n        <CardActionArea onClick={() => window.open(`https://cnft.io/token/${listing._id}`, '_blank')}>\n          <CardMedia\n            component='img'\n            image={`https://ipfs.io/ipfs/${listing.asset.metadata.image.replace('ipfs://', '')}`}\n            alt=''\n          />\n          <CardContent>\n            <Typography gutterBottom variant='h5'>\n              {ADA_SYMBOL}\n              {listing.price / 1000000}\n            </Typography>\n            <Typography variant='body2' color='text.secondary'>\n              {listing.asset.metadata.name}\n              <br />\n              <span style={{ fontSize: '0.7rem' }}>Listed: {new Date(listing.createdAt).toLocaleString()}</span>\n              <br />\n              <br />\n              <span className='icon-wrapper'>\n                <span className='icon-item'>\n                  <VisibilityIcon fontSize='small' /> {listing.views.length}\n                </span>\n                <span className='icon-item'>\n                  <FavoriteIcon fontSize='small' /> {listing.favouriteCount}\n                </span>\n              </span>\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n      </HtmlTooltip>\n    </Card>\n  )\n}\n\nexport default Listings\n","const ADA_SYMBOL = '₳'\n\nexport default ADA_SYMBOL\n","import Listings from './components/Listings'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Listings title='Recently Listed' options={{ sold: false }} />\n      <Listings title='Recently Sold' options={{ sold: true }} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}